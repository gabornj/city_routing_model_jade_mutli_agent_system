/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ConfigFrame.java
 *
 * Created on Nov 3, 2010, 12:38:38 AM
 */

package jadecity.frames;

import jadecity.classes.agentsClasses.MainAgent;
import jadecity.classes.dataStructureClasses.TrafficLightAlgorithm;
import javax.swing.JOptionPane;
import javax.swing.event.TreeModelListener;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;

/**
 *
 * @author SONY
 */
public class ConfigFrame extends javax.swing.JFrame {

    public MainAgent mainAg;  // main agent handler for config it and create agents and so on with that which sent by mainframe

    /** Creates new form ConfigFrame */
    public ConfigFrame() {
        initComponents();
        
    }

    public void init()
    {
        linearModeCheckBox.setSelected(mainAg.linearMode);
        GPSOnCheckBox.setSelected(mainAg.GPSIsOn);
        LightsControlCheckBox.setSelected(mainAg.lightsWithGPS);
        TrafficLightAlgorithmComboBox.setEnabled(LightsControlCheckBox.isSelected());
        SequentialModeCheckBox.setSelected(mainAg.sequentailMode);
        HighLightedAgentNameTextField.setText(mainAg.highLightedAgentName);
        DontKillAgentsCheckBox.setSelected(mainAg.dontKillAtFinishingTime);
        UseEndPointsCheckBox.setSelected(mainAg.useCenterEndpoints);
        UseAcrossEndPointsCheckBox.setSelected(mainAg.useAcrossCenterEndpoints);
        CoefInGpsTextBox.setText(String.valueOf(mainAg.PRIORITY_COEFFICIENT_FOR_TRAFFIC));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jButton3 = new javax.swing.JButton();
        linearModeCheckBox = new javax.swing.JCheckBox();
        GPSOnCheckBox = new javax.swing.JCheckBox();
        LightsControlCheckBox = new javax.swing.JCheckBox();
        SequentialModeCheckBox = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        HighLightedAgentNameTextField = new javax.swing.JTextField();
        DontKillAgentsCheckBox = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        LightDurationTextField = new javax.swing.JTextField();
        TrafficLightAlgorithmComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        UseEndPointsCheckBox = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        CoefInGpsTextBox = new javax.swing.JTextField();
        UseAcrossEndPointsCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Configure Frame");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jadecity/images/ok.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe Script", 1, 26));
        jLabel1.setForeground(new java.awt.Color(102, 102, 255));
        jLabel1.setText("Configure Frame");

        jButton2.setText("Create Agents");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Configure Program");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Creation");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Create Agents Now");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Speed Of Update Gui");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Speed Frame");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTree1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        jButton3.setText("Speed Of Update Gui");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        linearModeCheckBox.setText("Linear Mode For Agent Movement");
        linearModeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linearModeCheckBoxActionPerformed(evt);
            }
        });

        GPSOnCheckBox.setText("Agents Use GPS Information");
        GPSOnCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GPSOnCheckBoxActionPerformed(evt);
            }
        });

        LightsControlCheckBox.setText("Traffic Lights Work With GPS");
        LightsControlCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LightsControlCheckBoxActionPerformed(evt);
            }
        });

        SequentialModeCheckBox.setText("Sequential Mode For Agent Movement");
        SequentialModeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SequentialModeCheckBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("High Lighted Agent's Name (just his/her number) :");

        HighLightedAgentNameTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        DontKillAgentsCheckBox.setText("Don't Kill Agent After Finishing His/Her Journey");
        DontKillAgentsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DontKillAgentsCheckBoxActionPerformed(evt);
            }
        });

        jLabel3.setText("Lights Duration Time (in miliseconds) :");

        LightDurationTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        TrafficLightAlgorithmComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Numeral Mode", "Min Mode" }));

        jLabel4.setText("Traffic Light Algorithm :");

        UseEndPointsCheckBox.setText("Use First Center Points In Each Crossroad For Routing");
        UseEndPointsCheckBox.setActionCommand("Use Center Endpoints In Each ");
        UseEndPointsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UseEndPointsCheckBoxActionPerformed(evt);
            }
        });

        jLabel5.setText("Coefficient For Agent's Number In GPS Function :");

        CoefInGpsTextBox.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        UseAcrossEndPointsCheckBox.setText("Use End Center Points In Each Crossroad For Routing");
        UseAcrossEndPointsCheckBox.setActionCommand("Use End Center Points In Each ");
        UseAcrossEndPointsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UseAcrossEndPointsCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(56, 56, 56)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)))
                                    .addComponent(jLabel1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(47, 47, 47)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(linearModeCheckBox)
                                            .addComponent(SequentialModeCheckBox)
                                            .addComponent(GPSOnCheckBox)
                                            .addComponent(LightsControlCheckBox)
                                            .addComponent(DontKillAgentsCheckBox)
                                            .addComponent(UseEndPointsCheckBox)
                                            .addComponent(UseAcrossEndPointsCheckBox))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(18, 18, 18)
                                        .addComponent(HighLightedAgentNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                                        .addComponent(LightDurationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(18, 18, 18)
                                        .addComponent(CoefInGpsTextBox, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                                        .addComponent(TrafficLightAlgorithmComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(249, 249, 249)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(29, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(linearModeCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SequentialModeCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(GPSOnCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LightsControlCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(DontKillAgentsCheckBox)
                        .addGap(3, 3, 3)
                        .addComponent(UseEndPointsCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(UseAcrossEndPointsCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(CoefInGpsTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TrafficLightAlgorithmComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(HighLightedAgentNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(LightDurationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        mainAg.highLightedAgentName=HighLightedAgentNameTextField.getText();
        mainAg.lightDuration=Integer.parseInt(LightDurationTextField.getText());
        mainAg.sendDurationTime2TrafficLights();
        switch(TrafficLightAlgorithmComboBox.getSelectedIndex())
        {
            case 0:
                mainAg.trafficLightAlgorithm=TrafficLightAlgorithm.NumerialMode;
                break;
                
            case 1:
                mainAg.trafficLightAlgorithm=TrafficLightAlgorithm.MinMode;
        }
        mainAg.PRIORITY_COEFFICIENT_FOR_TRAFFIC=Integer.parseInt(CoefInGpsTextBox.getText());
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        CreateAgentsFrame caf=new CreateAgentsFrame();
        caf.mainAg=mainAg;
        caf.show();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTree1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree1MouseClicked

    }//GEN-LAST:event_jTree1MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        SpeedUpdateFrame suf=new SpeedUpdateFrame();
        suf.mainAg=mainAg;
        suf.show();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void linearModeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linearModeCheckBoxActionPerformed
        
        if(linearModeCheckBox.isSelected() && SequentialModeCheckBox.isSelected()) 
        {
            mainAg.sequentailMode=false;
            SequentialModeCheckBox.setSelected(false);
        }
        
        mainAg.linearMode=linearModeCheckBox.isSelected();
    }//GEN-LAST:event_linearModeCheckBoxActionPerformed

    private void GPSOnCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GPSOnCheckBoxActionPerformed

        mainAg.GPSIsOn=GPSOnCheckBox.isSelected();
        mainAg.updateMobileAgentsGPSEnablity();
    }//GEN-LAST:event_GPSOnCheckBoxActionPerformed

    private void LightsControlCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LightsControlCheckBoxActionPerformed
    
        TrafficLightAlgorithmComboBox.setEnabled(LightsControlCheckBox.isSelected());
        mainAg.lightsWithGPS=LightsControlCheckBox.isSelected();
        mainAg.updateTrafficAgentsGPSEnablity();
    }//GEN-LAST:event_LightsControlCheckBoxActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
        init();
    }//GEN-LAST:event_formWindowOpened

    private void SequentialModeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SequentialModeCheckBoxActionPerformed
        
        if(SequentialModeCheckBox.isSelected() && linearModeCheckBox.isSelected()) 
        {
            mainAg.linearMode=false;
            linearModeCheckBox.setSelected(false);
        }
        
        mainAg.sequentailMode=SequentialModeCheckBox.isSelected();
    }//GEN-LAST:event_SequentialModeCheckBoxActionPerformed

    private void DontKillAgentsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DontKillAgentsCheckBoxActionPerformed
        
        mainAg.dontKillAtFinishingTime=DontKillAgentsCheckBox.isSelected();
        mainAg.updateMobileAgentsDontKillAfterFinishing();
    }//GEN-LAST:event_DontKillAgentsCheckBoxActionPerformed

    private void UseEndPointsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UseEndPointsCheckBoxActionPerformed
        
        mainAg.useAcrossCenterEndpoints=false;
        UseAcrossEndPointsCheckBox.setSelected(false);
        mainAg.useCenterEndpoints=UseEndPointsCheckBox.isSelected();
        mainAg.updateUseCenterEndpointsUsability();
    }//GEN-LAST:event_UseEndPointsCheckBoxActionPerformed

    private void UseAcrossEndPointsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UseAcrossEndPointsCheckBoxActionPerformed
        
        mainAg.useCenterEndpoints=false;
        UseEndPointsCheckBox.setSelected(false);
        mainAg.useAcrossCenterEndpoints=UseAcrossEndPointsCheckBox.isSelected();
        mainAg.updateUseAcrossCenterEndpointsUsability();
    }//GEN-LAST:event_UseAcrossEndPointsCheckBoxActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConfigFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CoefInGpsTextBox;
    private javax.swing.JCheckBox DontKillAgentsCheckBox;
    private javax.swing.JCheckBox GPSOnCheckBox;
    private javax.swing.JTextField HighLightedAgentNameTextField;
    private javax.swing.JTextField LightDurationTextField;
    private javax.swing.JCheckBox LightsControlCheckBox;
    private javax.swing.JCheckBox SequentialModeCheckBox;
    private javax.swing.JComboBox TrafficLightAlgorithmComboBox;
    private javax.swing.JCheckBox UseAcrossEndPointsCheckBox;
    private javax.swing.JCheckBox UseEndPointsCheckBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree1;
    private javax.swing.JCheckBox linearModeCheckBox;
    // End of variables declaration//GEN-END:variables

}
